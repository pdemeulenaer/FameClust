 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !											    !
 !											    !
 !		                        FameClust 20.0                                      !
 !		(Finding the Age, Mass, and Extinction of star Clusters)                    !
 !		        Philippe de Meulenaer, PhD in Astrophysics                          !
 !		       Astronomical Observatory, Vilnius University                         !
 !											    !
 !											    !
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !
 ! Marie je te confie cela...
 !
 ! Date of conception: 16 March 2016
 ! Last update : 18 March 2016
 !
 ! Compilation: gfortran -O3 -march=native -ffast-math -funroll-loops -mcmodel=medium Module_Linear_Algebra.f90 Module_lecture.f90 FameClust_analytical_FAST5.f90 -o FameClust_analytical_FAST5.exe -lblas -llapack -lm
 !
 ! Example: time ./FameClust_analytical_FAST5.exe InputFameClustNEW_UBVRI_Z01900_M400 1 10 n00
 ! 
 !	   (No pain, no gain!)
 !         (Let's DO it!)
 !        O 
 !    ___o
 !   (*,*)
 !   (   )
 !---"--"----
 !
 !
 !!!!!!!!!!!!!!!!!!!!!!!!!!
 !IMPORTATIONS
 !!!!!!!!!!!!!!!!!!!!!!!!!!


 function smooth_gaussian_step_scalar(x, A, mu, sigma)
    ! '''This function is a step-like function: the left part of the step is a gaussian function with a given sigma. The right part of the step is 1. The idea is that the clusters models brighter than the mag-limit [mu] will be rejected from the probability computation: their probability computed using the other filters will be damped, multiplied by this step function, so by a factor close to 0. Cluster models fainter than the mag-limit will be kept (their computed proba will be multiplied by 1). The step is not abrupt, but gaussian to the bright (left) side, to take into account the uncertainty of the measurement of the mag-limit. '''

    real(4) :: smooth_gaussian_step_scalar
    real(4) :: x,A,mu,sigma

    !#Note: that step function takes scalar x and outputs scalar y.
    if (x < mu) then
     smooth_gaussian_step_scalar = A*exp(-(x-mu)**2/(2.*sigma**2))
    elseif (x>= mu) then
     smooth_gaussian_step_scalar = A
    else 
     write(*,*) 'ERROR!'
     write(*,*) 'mu = ', mu
     write(*,*) 'x = ', x
     read(*,*)
    endif
    return
 end function smooth_gaussian_step_scalar




 Program main
 use Lecture_module_fortran
 use Linear_algebra_module
 implicit none

 !!!!!!!!!!!!!!!!
 !INITIALISATIONS
 !!!!!!!!!!!!!!!!


 real(4), allocatable :: A_lambda_filters_selected(:),observations(:,:)
 real(4), allocatable :: observations_initial(:,:)
 real(4) :: age, mass, Z, Ebv
 real(4) :: distance_modulus
 real(4) :: lambda, lambda_f_MW, lambda_f_LMC, lambda_f_M31
 real(4) :: data_input(1:52),data_sigma_input(1:52),xx
 real(4) :: Z_selected, Rv
 real(4), allocatable :: observations_sigma(:,:)

 real(4), allocatable :: Grid_nodes_means(:,:,:,:)
 real(4), allocatable :: Grid_nodes_means_reddened(:,:,:,:,:)
 real(4), allocatable :: Grid_nodes_covariances(:,:,:,:,:)
 real(4), allocatable :: Grid_nodes_covariances_INV(:,:,:,:,:)
 real(4), allocatable :: Grid_nodes_covariances_DET_inv(:,:,:)
 real(4), allocatable :: Grid_nodes_weights(:,:,:)
 real(4), allocatable :: Grid_nodes_covariances_M(:,:,:,:,:)
 real(4), allocatable :: Grid_nodes_covariances_M_INV(:,:,:,:,:)
 real(4), allocatable :: Grid_nodes_covariances_M_DET(:,:,:)
 real(4), allocatable :: Grid_nodes_covariances_M_DET_inv(:,:,:)
 real(4), allocatable :: Grid_nodes_covariances_obs_LIST(:,:,:)
 real(4), allocatable :: Grid_nodes_covariances_obs(:,:)
 real(4), allocatable :: solution(:,:)

 real(4), allocatable :: observation(:)
 real(4), allocatable :: proba_node_3D(:,:,:)
 real(4), allocatable :: normalization_here(:,:,:)
 real(4), allocatable :: x_minus_mu(:,:,:,:,:)

 real(4) :: normalization
 integer, dimension(3) :: max_proba_indexes

 !real(4) :: Amplitude,xxx,mu,sigma_MagLim,MagLim_Factor,smooth_gaussian_step_scalar
 real(4) :: Min_extinction, Max_extinction!, proba_model_oneFilter
 real(4) :: sigma_filter_automatic!, proba_model
 real(4) :: a_sigma, b_sigma, c_sigma
 integer, allocatable :: observations_MagLim(:,:)
 integer, allocatable ::  filters_selected_index(:)
 integer, allocatable :: Cluster_ID(:)
 integer :: filter_ID !,Ext_limit1,Ext_limit2
 integer :: ff,ii,jj,a,m,zz,Ext, aa,mm, number_clusters
 integer :: list, number_cluster_observed
 integer :: choice_extinction
 integer :: number_filters, choice_filters, choice_extinction_law
 integer :: filters(1:52) !SHOULD BE IN ALLOCATABLE but conflict with input file reading
 integer :: number_begin, number_end, app_or_abs
 integer :: number_nodes_age,number_nodes_mass,number_models_per_node,number_of_filters_in_grid
 integer :: choice_RealClusters_or_ArtificialTest, choice_output_NodeFiles
 integer :: Ext_min,Ext_max,Ext_bidon
 character(len=50) :: arg !,file_name
 character(len=200) :: InputFile_Name
 character(len=50) :: age_indice,mass_indice,Z_indice,Ebv_indice
 character(len=50) :: jj_char
 character(len=300) :: File_information_filters_and_ExtCurve
 character(len=300) :: file_out_cluster, file_out_cluster_f90
 character(len=300) :: file_observed_clusters
 character(len=300) :: file_out_cluster_node
 character(len=300) :: Grid_path1,Grid_path2
 CHARACTER(len=3) :: Z_indice_selected
 character(len=300) :: path_GMM_bin_file
 integer, parameter :: components_number = 10
 real(4), dimension(1:components_number,1:29) :: means
 real(4), dimension(1:components_number,1:29,1:29) :: covariances
 real(4), dimension(1:components_number) :: weights

 integer :: N_bin_all_nodes            != 7171000 !4331000 !5041000 !4331000 !5751000 !4331000 !106253000
 integer, allocatable :: bidule(:)

 write(*,*)
 CALL system('date')

 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !GETTING THE ARGUMENTS OF THE COMMAND-LINE 
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 call getarg(1, InputFile_Name)
 InputFile_Name = '/home/philippe/Desktop/Discrete_models_comparaison_jtao&
	&/SC_Parameters_20/'//trim(adjustl(adjustr(InputFile_Name))) 
 call getarg(2, arg) 
 read (arg,'(I10)') number_begin
 call getarg(3, arg)
 read (arg,'(I10)') number_end
 call getarg(4, Z_indice_selected) 
 call age_mass_Z_December_Inverse(aa,mm,zz,Ext,age,mass,Z,Ebv, Z_indice_selected)
 call age_mass_Z_December(a,m,zz,Ext, age, mass, Z_selected, Ebv, age_indice, mass_indice, Z_indice, Ebv_indice)
 write(*,*)Z_indice,zz,Z_selected

 number_clusters = number_end - number_begin + 1  


 !# -------------------------
 !# Loading of the input file
 !# -------------------------
 filters(:) = 0
 open(unit=10,file=InputFile_Name)
 READ(10,*)
 READ(10,*)
 READ(10,*)number_filters
 READ(10,*)
 allocate(filters_selected_index(1:number_filters),A_lambda_filters_selected(1:number_filters))
 DO ii = 1,number_filters
  READ(10,*) choice_filters
  filters_selected_index(ii)=choice_filters
  filters(choice_filters) = 1
 ENDDO
 READ(10,*)
 READ(10,*) distance_modulus  		!M33: 24.54 (McConnachie2004;2005) !M31: 24.47 (Narbutis2008)
 READ(10,*)
 READ(10,*) app_or_abs			!apparent or absolute magnitude? (1/2)
 READ(10,*)
 READ(10,*) file_observed_clusters	!name of the file containing the observed clusters
 READ(10,*)
 READ(10,*) number_cluster_observed	!How many clusters are there in your file
 READ(10,*)
 READ(10,*) choice_extinction		!cluster(s) studied extincted or not ? (1/2)
 READ(10,*)
 READ(10,*) choice_extinction_law
 READ(10,*)
 READ(10,'(a)') file_out_cluster  	!This format '(a)' because of the slashes in the name of directories
 READ(10,*)
 write(*,*) file_out_cluster		!Path where to store the output files
 READ(10,'(a)') Grid_path1
 READ(10,'(a)') Grid_path2
 READ(10,*)
 READ(10,*) number_nodes_age,number_nodes_mass
 READ(10,*)
 READ(10,*) number_models_per_node
 READ(10,*)
 READ(10,*) number_of_filters_in_grid
 READ(10,*)
 READ(10,'(a)') File_information_filters_and_ExtCurve
 READ(10,*)
 READ(10,*) Min_extinction, Max_extinction
 READ(10,*)
 READ(10,*) choice_RealClusters_or_ArtificialTest
 READ(10,*)
 READ(10,*) choice_output_NodeFiles
 close(10)
 Ext_min = int(Min_extinction*100+1)
 Ext_max = int(Max_extinction *100+1)





 !# -----------------------------------
 !# Allocations of the different tables
 !# -----------------------------------

 !?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
 !N_bin_all_nodes = number_nodes_age * number_nodes_mass * number_models_per_node 
 !ALLOCATE(bidule(N_bin_all_nodes))    !????? STRANGELY, IF I REMOVE THIS, IT BUGS!  ????????? (but not useful at all!)
 !?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

 ALLOCATE(Cluster_ID(1:number_cluster_observed))
 ALLOCATE(observations(1:number_cluster_observed,1:number_filters))
 ALLOCATE(observations_initial(1:number_cluster_observed,1:number_filters))
 ALLOCATE(observations_sigma(1:number_cluster_observed,1:number_filters))	
 ALLOCATE(observations_MagLim(1:number_cluster_observed,1:number_filters))
 ALLOCATE(Grid_nodes_means(number_nodes_age,number_nodes_mass,components_number,number_filters))
 ALLOCATE(Grid_nodes_means_reddened(121,number_nodes_age,number_nodes_mass,components_number,number_filters))
 ALLOCATE(Grid_nodes_covariances(number_nodes_age,number_nodes_mass,components_number,number_filters,number_filters))
 ALLOCATE(Grid_nodes_covariances_INV(number_nodes_age,number_nodes_mass,components_number,number_filters,number_filters))
 ALLOCATE(Grid_nodes_covariances_DET_inv(number_nodes_age,number_nodes_mass,components_number))
 ALLOCATE(Grid_nodes_weights(number_nodes_age,number_nodes_mass,components_number))
 ALLOCATE(Grid_nodes_covariances_M(number_nodes_age,number_nodes_mass,components_number,number_filters,number_filters))
 ALLOCATE(Grid_nodes_covariances_M_INV(number_nodes_age,number_nodes_mass,components_number,number_filters,number_filters))
 ALLOCATE(Grid_nodes_covariances_M_DET(number_nodes_age,number_nodes_mass,components_number))
 ALLOCATE(Grid_nodes_covariances_M_DET_inv(number_nodes_age,number_nodes_mass,components_number))
 ALLOCATE(Grid_nodes_covariances_obs_LIST(number_clusters,number_filters,number_filters))
 ALLOCATE(Grid_nodes_covariances_obs(number_filters,number_filters))
 ALLOCATE(solution(number_clusters,8))
 ALLOCATE(observation(number_filters))
 ALLOCATE(proba_node_3D(number_nodes_age,number_nodes_mass,121))
 ALLOCATE(normalization_here(number_nodes_age,number_nodes_mass,components_number))
 ALLOCATE(x_minus_mu(121,number_nodes_age,number_nodes_mass,components_number,number_filters))












 !# -----------------------------------------------------------------------------------------
 !#Loading of the A_lambda (extinction parameters) for the filters selected in the input file
 !# -----------------------------------------------------------------------------------------
 write(*,*)
 write(*,*) '--------------------------------------------------------'
 write(*,*) 'Loading of the A_lambda (extinction parameters)' 
 write(*,*) '--------------------------------------------------------'

 CALL chdir('/home/philippe/Desktop/Discrete_models_comparaison_jtao/SC_Parameters_20/Source/')
 open(unit=18, file = File_information_filters_and_ExtCurve)
 !open(unit=18, file = 'Filters_information.dat')
 !open(unit=18, file = 'Filters_information_observations.dat')
 !open(unit=18, file = 'Filters_information_observations_WFC3_from_STSCI.dat')
 !open(unit=18, file = 'Filters_information_observations_WFC3_from_STSCI_test.dat')
 read(18,*)
 jj=0
 do ii = 1,52 !46
  read(18,*)lambda, lambda_f_MW, lambda_f_LMC, lambda_f_M31, filter_ID, sigma_filter_automatic, xx, a_sigma, b_sigma, c_sigma
  if (filters(ii) == 1) then
   jj=jj+1
   if (choice_extinction_law == 1) then		!Case MW
    Rv = 3.1
    A_lambda_filters_selected(jj)=lambda_f_MW
   elseif (choice_extinction_law == 2) then	!Case LMC average (Gordon 2003)
    Rv = 3.4
    A_lambda_filters_selected(jj)=lambda_f_LMC
   elseif (choice_extinction_law == 3) then	!Case M31
    Rv = 2.5
    A_lambda_filters_selected(jj)=lambda_f_M31
   endif
  endif
 enddo
 close(18)

 !write(*,*) A_lambda_filters_selected

 write(*,*) '--------------------------------------------------------'
 write(*,*) 'A_lambda loaded'
 write(*,*) '--------------------------------------------------------'
 write(*,*)







 !# -----------------------------------------------------------------------------------------
 !#Loading of the observations
 !# -----------------------------------------------------------------------------------------
 write(*,*)
 write(*,*) '--------------------------------------------------------'
 write(*,*) 'Loading of the observation'
 write(*,*) '--------------------------------------------------------'

 CALL chdir(file_out_cluster)
 file_observed_clusters = trim(file_observed_clusters) !//'.fmct' !IT WILL READ THE .fmct FORMAT ONLY!!
 OPEN(unit=11,file=file_observed_clusters)
 READ(11,*)
 observations(:,:)=0.

 DO list = 1, number_cluster_observed !LOOP ON ALL CLUSTERS

  !#READING THE PHOTOMETRY
  READ(11,*) Cluster_ID(list), xx,xx,xx,xx, data_input(1:52), xx,xx,xx,xx, &    !OLD <17Feb16!
  !READ(11,*) Cluster_ID(list), xx,xx,xx,xx, data_input(1:52), &
       & data_sigma_input(1:52)!,observations_MagLim(list,1:number_filters)
  do ff = 1,number_filters   
   observations(list,ff) = data_input(filters_selected_index(ff))
   observations_initial(list,ff) = data_input(filters_selected_index(ff))
   observations_sigma(list,ff) = data_sigma_input(filters_selected_index(ff)) 
  enddo

  !#TAKING DISTANCE MODULUS INTO ACCOUNT
  IF (app_or_abs == 1) then
   do ff = 1, number_filters 
    observations(list,ff) = observations(list,ff) - distance_modulus
   enddo
  ENDIF

  !#SETTING MINIMUM SIGMA FOR FILTERS
  do ff = 1,number_filters  
   if (observations_sigma(list,ff)<0.03) observations_sigma(list,ff) = 0.03  	!Very low criteria  
   !if (observations_sigma(list,ff)<0.05) observations_sigma(list,ff) = 0.05  	!Classical criteria  
   !if (observations_sigma(list,ff)<0.07) observations_sigma(list,ff) = 0.07   	!large criteria 
  enddo

  !#REJECTING GAP DATA (by increasing the sigmas of these gaps data to infinite)
  do ff=1,number_filters 
   if (observations(list,ff) >= 30.) then   !If mag > 30
    observations(list,ff) = 99.999
    observations_sigma(list,ff) = 9999.
   endif
   if (observations_sigma(list,ff) >= 10.) then   !If error > 10   !1April2016
    observations(list,ff) = 99.999                                 !1April2016
    observations_sigma(list,ff) = 9999.                            !1April2016
   endif
  enddo

 ENDDO
 CLOSE(11)


 write(*,*) '--------------------------------------------------------'
 write(*,*) 'Observation loaded'
 write(*,*) '--------------------------------------------------------'
 write(*,*)






 !# -----------------------------------------------
 !# Loading of the grid of models (from .bin files)
 !# -----------------------------------------------
 write(*,*)
 write(*,*) '--------------------------------------------------------'
 write(*,*) 'Loading of the grid of models'
 write(*,*) '--------------------------------------------------------'

 Grid_nodes_means = 0.
 Grid_nodes_means_reddened = 0.
 Grid_nodes_weights = 0.
 Grid_nodes_covariances = 0.
 Ext_bidon = 1

 !path_GMM_bin_file = '/home/philippe/Desktop/Discrete_models_comparaison_jtao/'
 !path_GMM_bin_file = trim(path_GMM_bin_file) // 'Grid_FRS_allZ_Kroupa_generated/NPZ_in_BIN_files/'//trim(Z_indice)//'/'

 path_GMM_bin_file = '/home/philippe/Desktop/Discrete_models_comparaison_jtao/'
 !path_GMM_bin_file = trim(path_GMM_bin_file) // 'Grids_with_ACS/Grid_FRS_1000models_per_node_OldGenerationCode/'
 path_GMM_bin_file = trim(path_GMM_bin_file) // 'Grids_with_ACS/Grid_FRS_1000models_per_node_NewGenerationCode/'
 path_GMM_bin_file = trim(path_GMM_bin_file) // 'NPZ_files/NPZ_in_BIN_files/'//trim(Z_indice)//'/'

 write(*,*) path_GMM_bin_file

 Do aa = 1, number_nodes_age !71		!Loop on the age. 
  Do mm = 1, number_nodes_mass  !101		!Loop on the mass. 

   call age_mass_Z_December(aa,mm,zz,Ext_bidon,age,mass,Z,Ebv,age_indice,mass_indice,Z_indice,Ebv_indice)

   !READING BINARY GRID
   call Lecture_GMM_BIN_GRID_March2016(path_GMM_bin_file,means,covariances,weights,&
     	& age_indice,mass_indice,Z_indice,components_number)

   !#Extracting the means, covariances and weights for the good filters, in grids
   do ii = 1,components_number
    Grid_nodes_means(aa,mm,ii,:)         = means(ii,                         &
      & filters_selected_index(1):filters_selected_index(1)+number_filters-1)          !-1 !!!!  Bug found March 30
    Grid_nodes_covariances(aa,mm,ii,:,:) = covariances(ii,                   &
      & filters_selected_index(1):filters_selected_index(1)+number_filters-1,  &       !-1 !!!!  Bug found March 30
      & filters_selected_index(1):filters_selected_index(1)+number_filters-1)          !-1 !!!!  Bug found March 30
   enddo
   Grid_nodes_weights(aa,mm,:)           = weights(:)

  Enddo		
  write(*,*) 'Loading Age ', age, ' performed'
 Enddo    	

 write(*,*) '--------------------------------------------------------'
 write(*,*) 'Grid loaded'
 write(*,*) '--------------------------------------------------------'
 write(*,*)
 !read(*,*)



 !#REDDENING OF THE MEANS, TO ACCOUNT FOR EXTINCTED NODES
 Do aa = 1, number_nodes_age !71		!Loop on the age. 
  Do mm = 1, number_nodes_mass  !101		!Loop on the mass. 
   do Ext = Ext_min,Ext_max   !#1,122 -> E(B-V)=[0,1.1]
    Ebv = (Ext-1)*0.01
    do ii = 1,components_number
      Grid_nodes_means_reddened(Ext,aa,mm,ii,:) =  Grid_nodes_means(aa,mm,ii,:) + A_lambda_filters_selected(:) * Rv * Ebv 
    enddo
   enddo
  Enddo		
 Enddo 



 !#BUILDING OF THE MATRIX CONTAINING THE SIGMAS OF DATA
 Grid_nodes_covariances_obs = 0.
 Grid_nodes_covariances_obs_LIST = 0.
 do list = 1,number_clusters
  do ff = 1,number_filters  !#Building the sigma covariance matrix
   Grid_nodes_covariances_obs(ff,ff) = observations_sigma(list,ff)*observations_sigma(list,ff)  !#variance, not stdev
  enddo
  !if (list==1) write(*,*) Grid_nodes_covariances_obs
  do mm = 1,number_nodes_mass
   do aa = 1,number_nodes_age
    do ii = 1,components_number
     Grid_nodes_covariances_obs_LIST(list,:,:) = Grid_nodes_covariances_obs(:,:)
    enddo
   enddo
  enddo
 enddo
 write(*,*) 'MATRIX SIGMA LOADED' 





 CALL system('date')
 !read(*,*)






!#THE MAIN LOOP
 solution = 0.
 DO list = 1,number_clusters

 	!#Computing the general (merged) covariance matrix 
	Grid_nodes_covariances_M = 0.
        do aa = 1,number_nodes_age
         do mm = 1,number_nodes_mass
          do ii = 1,components_number
           Grid_nodes_covariances_M(aa,mm,ii,:,:) = Grid_nodes_covariances(aa,mm,ii,:,:) + &
      & Grid_nodes_covariances_obs_LIST(list,:,:)
 	  enddo
	 enddo
	enddo


	!DETERMINANT!!
	!#Computing determinant of covariance matrix (and inversing it after, as suitable for the following)
	!PYTHON: Grid_nodes_covariances_M_DET_inv(:,:,:) = np.linalg.det(Grid_nodes_covariances_M(:,:,:,:,:))**(-0.5)
	Grid_nodes_covariances_M_DET_inv = 0.
        do aa = 1,number_nodes_age
         do mm = 1,number_nodes_mass
          do ii = 1,components_number
           Grid_nodes_covariances_M_DET_inv(aa,mm,ii) = &
      & function_determinant(number_filters,Grid_nodes_covariances_M(aa,mm,ii,:,:))**(-0.5)
 	  enddo
	 enddo
	enddo


	!INVERSE!!
	!#Computing inverse of covariance matrix 
 	!PYTHON: Grid_nodes_covariances_M_INV(:,:,:,:,:) = np.linalg.inv(Grid_nodes_covariances_M(:,:,:,:,:))
	Grid_nodes_covariances_M_INV = 0.
        do aa = 1,number_nodes_age
         do mm = 1,number_nodes_mass
          do ii = 1,components_number
           call Matrix_inversion(number_filters,Grid_nodes_covariances_M(aa,mm,ii,:,:),&
      & Grid_nodes_covariances_M_INV(aa,mm,ii,:,:))
 	  enddo
	 enddo
	enddo


	observation = observations(list,:)
	proba_node_3D = 0.
	normalization = 1./(2*3.1415926535)**(0.5*components_number)
	normalization_here = 0.
	normalization_here = normalization*Grid_nodes_covariances_M_DET_inv(:,:,:)*Grid_nodes_weights(:,:,:)
	x_minus_mu = 0.

	do ff = 1,number_filters
	 x_minus_mu(:,:,:,:,ff) = observation(ff) - Grid_nodes_means_reddened(:,:,:,:,ff)
	enddo


	!PYTHON:proba_node_3D, max_proba_indexes = probability_building_WFC3(components_number,dummy,normalization_here,x_minus_mu,Grid_nodes_covariances_M_INV,Ext_min,Ext_max)
	call blas_multiplication_gmm(components_number,normalization_here,x_minus_mu,&
      & Grid_nodes_covariances_M_INV,Ext_min,Ext_max,proba_node_3D,max_proba_indexes)

	!#PEAK SOLUTION
	aa = max_proba_indexes(1)
	mm = max_proba_indexes(2)
	call age_mass_Z_December(aa,mm,zz,Ext, age, mass, Z_selected, Ebv, &
      & age_indice, mass_indice, Z_indice, Ebv_indice)
	Ebv = (max_proba_indexes(3)-1)*0.01

	solution(list,1) = list
	solution(list,2) = age
	solution(list,3) = log10(mass)
	solution(list,4) = Ebv
	solution(list,5) = MAXVAL(proba_node_3D) !proba_node_3D.max()
	write(*,*) list, age,log10(mass),Ebv



	!# ----------------------------------------------
	!Writing of node file for each individual cluster  (optional)
	!# ----------------------------------------------
        if (choice_output_NodeFiles == 1) then
	 WRITE(jj_char, '(i10)' ) Cluster_ID(list)
	 file_out_cluster_node=trim(file_out_cluster)//'node_files/'
	 OPEN(unit = 40,file=trim(file_out_cluster_node)//'Cluster_'//trim(adjustl(jj_char))//'_node_Z'//Z_indice_selected//'.dat')
	 write(40,*)'# aa  mm Ext   Proba'
 	 do aa = 1,number_nodes_age   !71 !650, 1200
 	  do mm = 1,number_nodes_mass !101 !200, 600
 	   do Ext = 1,121 !Ext_limit1,Ext_limit2
	    !if (proba_node_3D(aa,mm,Ext) > 0.) then !(node_solution(aa,mm,Ext,1) > 0.) then
	    if (proba_node_3D(aa,mm,Ext) > 1e-13*solution(list,5)) then !(node_solution(aa,mm,Ext,1) > 0.) then
	    !if (proba_node_3D(aa,mm,Ext) > 0.0001*solution(list,5)) then !If larger than 1/10000 of the max proba
 	     write(40,'(i4,i4,i4,E12.3)') &
	 & aa,mm,Ext, &
	 & proba_node_3D(aa,mm,Ext) !node_solution(aa,mm,Ext,1) 
	    endif
 	   enddo
 	  enddo
 	 enddo
 	 close(40)
        endif

 ENDDO




 !# ----------------------------------------------
 !Writing of solutions for all clusters (for 1Z)
 !# ----------------------------------------------
 file_out_cluster_f90 = trim(file_out_cluster)
 file_out_cluster = trim(file_out_cluster)//'file_out_cluster'
 file_out_cluster_f90 = trim(file_out_cluster_f90)//'All_clusters_parameters_results_f90_V200_FameClustA'
 file_out_cluster_f90 = trim(file_out_cluster_f90)//'_Z'//Z_indice_selected
 open(unit=41,file=file_out_cluster_f90)
 write(41,*)'# ID   age  mass Ebv   Proba'
 do list = number_begin,number_end
  write(41,'(i5,F7.2,F5.2,F5.2,E12.4,i10,i5)') &
	& Cluster_ID(list), &
	& solution(list,2), &
	& solution(list,3), &
	& solution(list,4), &
	& solution(list,5)
 enddo
 close(41)






 CALL system('date')
 WRITE(*,*)' Computation completed' 
 stop !To avoid SIGABR error





 deALLOCATE(Cluster_ID)
 deALLOCATE(observations)
 deALLOCATE(observations_initial)

 !For MagLim algorithm
 deALLOCATE(observations_sigma)	
 deALLOCATE(observations_MagLim)

 deALLOCATE(bidule)    !????? 

 deALLOCATE(Grid_nodes_means)
 deALLOCATE(Grid_nodes_means_reddened)
 deALLOCATE(Grid_nodes_covariances)
 deALLOCATE(Grid_nodes_covariances_INV)
 deALLOCATE(Grid_nodes_covariances_DET_inv)
 deALLOCATE(Grid_nodes_weights)
 deALLOCATE(Grid_nodes_covariances_M)
 deALLOCATE(Grid_nodes_covariances_M_INV)
 deALLOCATE(Grid_nodes_covariances_M_DET)
 deALLOCATE(Grid_nodes_covariances_M_DET_inv)
 deALLOCATE(Grid_nodes_covariances_obs_LIST)
 deALLOCATE(Grid_nodes_covariances_obs)
 deALLOCATE(solution)
 deALLOCATE(observation)
 deALLOCATE(proba_node_3D)
 deALLOCATE(normalization_here)
 deALLOCATE(x_minus_mu)


 
 end program
