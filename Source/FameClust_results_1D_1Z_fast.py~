
#Script which follows Fortran run, and defines 1D probabilities

#Execution: taskset -c 0  time python FameClust_results_1D_1Z_fast.py InputFameClustNEW_UBVRI_Z01900_M400 1 10 n00

import numpy as np
import numexpr as ne
import scipy
import os
import os.path
import math
import time
import random
from random import gauss
import pylab
from pylab import *
import sys
import Lecture_module  # (Module located in /home/philippe/Desktop/Discrete_models_comparaison_jtao)
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.mlab as mlab
from matplotlib.colors import LogNorm
import mpl_toolkits.axisartist as axisartist

params = {'axes.labelsize': 9,
          'axes.linewidth': 0.5,
          'text.fontsize': 9,
          'xtick.labelsize': 6,   #Before 8
          'ytick.labelsize': 6,   #Before 8
	  'xtick.major.pad': 4,	  #Before 8
	  'ytick.major.pad': 4,	  #Before 8
          'text.usetex': False,
          'xtick.major.size': 3.5,
          'ytick.major.size': 3.5,
          'xtick.minor.size': 2,
          'ytick.minor.size': 2,
#          'ps.usedistiller': 'xpdf',
          'ps.distiller.res': 6000,
#          'ps.fonttype': 42,
#          'pdf.compression': 0,
          'pdf.fonttype': 42
          }
plt.rcParams.update(params)


#------------------------------------------------------------------------------------------------


def Error_bars(age_centers,age_histo,age_1D):
 #Age error bar (34% left and 34% right)
 hist_1D_all = 0.				#to have the integral of the histogram (only sum of bars)
 for bb in range(0,len(age_histo)):		
  hist_1D_all = hist_1D_all + age_histo[bb]		
 sum34pc_left = 0.				
 for bb in range(0,len(age_centers)):		
  sum34pc_left = sum34pc_left + age_histo[bb]
  if sum34pc_left >= hist_1D_all*0.1585: break
 age_1D_left_value = min(age_centers[bb],age_1D) #+ 0.05
 sigma_left_age = abs(age_1D - age_1D_left_value)
 sum34pc_right = 0.					#to have the integral of the histogram (only sum of bars)
 for bb in range(0,len(age_centers)):		
  sum34pc_right = sum34pc_right + age_histo[bb]
  if sum34pc_right >= hist_1D_all*0.8415: break
 age_1D_right_value = max(age_centers[bb],age_1D) #+ 0.05
 sigma_right_age = abs(age_1D - age_1D_right_value)
 return age_1D_left_value,age_1D_right_value #,sum34pc_left,sum34pc_right

#------------------------------------------------------------------------------------------------

Cores_number = ne.detect_number_of_cores()
ne.set_num_threads(Cores_number)
#print Cores_number
#raw_input()

# -------------------------
# Loading of the input file (should be the same as for Fortran run)
# -------------------------
print
print 80*'-'
print
print 50*'-'
print 'Loading of InputFile'
print 50*'-'
print

InputFile_Name = sys.argv[1] # The name of input file is given during execution of the script
number_begin = int(sys.argv[2])
number_end = int(sys.argv[3])
Z_selected = sys.argv[4]

Z_indice_selected = Z_selected
Z_indice = Z_selected
print Z_indice_selected
if Z_selected != 'all':
 Z,zz = Lecture_module.Zindex_to_Z_and_zz(Z_indice_selected)
#if Z_selected == 'all':

InputFile = open('/home/philippe/Desktop/Discrete_models_comparaison_jtao/SC_Parameters_20/'+InputFile_Name).readlines()
my_list = []
for line in InputFile:
    item = str.split(line)
    print line
    if item[0][0] != '#':
     my_list.append(item[0])

number_filters = int(my_list[0])
print 'Number of filters selected:                 ', number_filters
filters_selected_index = np.arange(number_filters) 	#integer array containing the indexes of the selected filters 
for ii in range(0,number_filters):
 filters_selected_index[ii] = int(my_list[ii+1])
print 'Indexes of filters selected:               ', filters_selected_index
Distance_modulus_host_galaxy = float(my_list[number_filters+1])
print 'Distance modulus of the host galaxy:        ', Distance_modulus_host_galaxy
app_or_abs = int(my_list[number_filters+2])
print 'Apparent mags [1], Absolute mags [2]:       ', app_or_abs
file_observed_clusters = my_list[number_filters+3]
print 'Input file of the observed clusters:        '
print '    ',file_observed_clusters
number_cluster_observed = int(my_list[number_filters+4])
print 'Number of observed clusters:                ',  number_cluster_observed	#[obsolete]
choice_extinction = int(my_list[number_filters+5])
print 'Cluster(s) extincted [1], not extincted [2]:', choice_extinction
choice_extinction_law = int(my_list[number_filters+6])
print 'Extinction law of MW [1], of LMC [2]:       ', choice_extinction_law
path_file_out_cluster = my_list[number_filters+7]
print 'Path of output files for derived parameters:' 
print '    ',path_file_out_cluster
print
print 50*'-'
print 'InputFile loaded'
print 50*'-'
print
#raw_input()

#print 'The path is not correctly input', path_file_out_cluster
#path_main_results = raw_input('Enter the path where are located the main results (in Milka, it is in mnt/ directory): ')
#path_main_results = '/mnt/scratch/philippe/test_1000_random_clusters/Test_1000_noise_Ebv/Fixed_mass/Half_Random_Sampling_results/GALEX_UBVRI/GALEX_UBVRI_Z00500_vs_other_Z_logm400/'

# /mnt/scratch/philippe/test_1000_random_clusters/Test_1000_noise_Ebv/Fixed_mass/Half_Random_Sampling_results/UBVRI/UBVRI_Z01900_vs_other_Z_logm400/

# -----------------------------------------------------------------------------------------
#Loading of the observations
# -----------------------------------------------------------------------------------------
print
print 50*'-'
print 'Loading of the observation'
print 50*'-'
print
data_input = np.genfromtxt(path_file_out_cluster+file_observed_clusters, comments='#')
M1_input = data_input[:,filters_selected_index+4]

ID_clusters = np.zeros((len(data_input[:,0]),), dtype=np.int)
for ii in range(0,len(data_input[:,0])):
 ID_clusters[ii] = int(np.rint(data_input[ii,0]))

print 'M1: ', M1_input
#print 'M1[0:number_filters]: ', M1[0:number_filters]
del data_input
print 50*'-'
print 'Observation loaded'
print 50*'-'
print
#raw_input()




solution = np.zeros((number_end,4))
age_histo1D_centers  = np.zeros(71)
mass_histo1D_centers = np.zeros(61)
Ebv_histo1D_centers  = np.zeros(401)
Z_histo1D_centers    = np.zeros(13)

#Building the centers of bins
zz_bidon,mm=1,1
for aa in range(1,72):
 age, mass, Z, age_indice, mass_indice, Z_indice_bidon = Lecture_module.age_mass_Z_December2011(aa,mm,zz_bidon)
 age_histo1D_centers[aa-1] = age
aa,zz_bidon=1,1
for mm in range(1,62):
 age, mass, Z, age_indice, mass_indice, Z_indice_bidon = Lecture_module.age_mass_Z_December2011(aa,mm,zz_bidon)
 mass_histo1D_centers[mm-1] = log10(mass)
for Ext in range(0,401):
 Ebv_histo1D_centers[Ext] = Ext*0.02
for jj in range(0,13):
 Z_histo1D_centers[jj] = jj 
#print age_histo1D_centers, mass_histo1D_centers, Ebv_histo1D_centers, Z_histo1D_centers
#raw_input()

#Loop on all observed clusters
for ii in range(number_begin,number_end+1):
 print 'Cluster ', ii
 print 'ID ', ID_clusters[ii-1]
 M1 = M1_input[ii-1]
 print M1

 #First task: load the 13 histo files (one for each Z) of each cluster
 age_histo1D  = np.zeros(71)
 mass_histo1D = np.zeros(61)
 Ebv_histo1D  = np.zeros(401)
 Z_histo1D    = np.zeros(13)

 fname = path_file_out_cluster+'histo_files/'+'Cluster_{0}_histo1D_Z{1}_V101.dat'.format(str(ID_clusters[ii-1]),Z_indice) 
 if os.path.isfile(fname) == True:
  data_models = np.genfromtxt(fname,comments='#')
  age_histo1D  = age_histo1D  + data_models[0:71,0]
  mass_histo1D = mass_histo1D + data_models[0:61,1]
  Ebv_histo1D  = Ebv_histo1D  + data_models[:,2]
  Z_histo1D    = Z_histo1D    + data_models[0:13,3]


 #print age_histo1D
 #raw_input()

 #Fifth task: building the 1D histograms pictures
 # ------------------------------------
 # Building the probabilitieS 1D		#I could also build the 3D!!!
 # ------------------------------------
 age_histo = age_histo1D
 index_max_age = np.argmax(age_histo)
 age_centers = age_histo1D_centers #(age_edges[:-1]+age_edges[1:])/2
 age_1D = age_centers[index_max_age]

 print age_1D

 mass_histo = mass_histo1D
 index_max_mass = np.argmax(mass_histo)
 mass_centers = mass_histo1D_centers #(mass_edges[:-1]+mass_edges[1:])/2
 mass_1D = mass_centers[index_max_mass]

 Ebv_histo = Ebv_histo1D
 index_max_Ebv = np.argmax(Ebv_histo)
 Ebv_centers = Ebv_histo1D_centers #(Ebv_edges[:-1]+Ebv_edges[1:])/2
 Ebv_1D = Ebv_centers[index_max_Ebv] 

 Z_histo = Z_histo1D
 index_max_Z = np.argmax(Z_histo)
 Z_centers = Z_histo1D_centers #(Z_edges[:-1]+Z_edges[1:])/2
 Z_1D = Z_centers[index_max_Z]
 
 #build_pictures = 0 #(in this case, no pictures)
 build_pictures = 1 #(in this case, we build pictures)
 if build_pictures==1: #If we want the 1D histogram pictures
	 pars_age_1Z_vs_3Z = matplotlib.figure.SubplotParams(left=0.05, bottom=0.17, right=0.985, top=0.925, wspace=0.05, hspace=0.4)
	 fig    = plt.figure(1,figsize=(350/25.4,105/25.4),subplotpars=pars_age_1Z_vs_3Z)

	 #AGE--------------------------------------------------------------------------------------------------
	 ax_age = fig.add_subplot(141)	
	 #age_histo, age_edges = np.histogram(age_histo1D, bins=71, range=[6.575,10.125], normed=True, density=None)
	 #width_age = (age_edges[1]-age_edges[0])
	 ax_age.bar(age_centers, age_histo, align = 'center', width = 0.05, color=(0./256.,126./256.,253./256.))
	 #ax_age.set_xlim(6.575,10.125)
	 labels = [item.get_text() for item in ax_age.get_yticklabels()] 
	 labels[:] = ''
	 ax_age.set_yticklabels(labels)
	 #Age error bar (34% left and 34% right)
	 age_1D_left_value,age_1D_right_value = Error_bars(age_centers,age_histo,age_1D)
	 sigma_left_age = abs(age_1D - age_1D_left_value)
	 sigma_right_age = abs(age_1D - age_1D_right_value)
	 l_age_left = ax_age.axvline(x=age_1D_left_value,linewidth=3, ls='--', dashes=(10,10), color='r')
	 l_age = ax_age.axvline(x=age_1D,linewidth=3, color='r')
	 l_age_right = ax_age.axvline(x=age_1D_right_value,linewidth=3, ls='--', dashes=(10,10), color='r')
	 ax_age.set_xlim(6.5,10.2)
	 ax_age.set_xticks([7, 8, 9, 10])
	 ax_age.set_xlabel(r'log($t/yr$)', labelpad=0,fontsize=24)
	 ax_age.tick_params(axis='both', which='major', labelsize=20)
	 #xlabel(r'log($t$/yr)')
	 ax_age.set_ylabel(r'Probability density',fontsize=22)
	 #AGE--------------------------------------------------------------------------------------------------



	 #MASS-------------------------------------------------------------------------------------------------
	 ax_mass = fig.add_subplot(142) #(142, sharey=ax_age)
	 #mass_histo, mass_edges = np.histogram(models_selected[:,1], bins=81, range=[1.975,6.025], normed=True, weights=models_selected[:,4+number_filters], density=None) 	
	 #width_mass = (mass_edges[1]-mass_edges[0])
	 ax_mass.bar(mass_centers, mass_histo, align = 'center', width = 0.05, color=(0./256.,126./256.,253./256.))
	 ax_mass.set_xlim(1.975,5.025)
	 ax_mass.set_xticks([2, 3, 4, 5])
	 ax_mass.set_xlabel(r'log($m$/${\rm M}_{\odot}$)', labelpad=0,fontsize=24)
	 ax_mass.tick_params(axis='both', which='major', labelsize=20)
	 labels = [item.get_text() for item in ax_mass.get_yticklabels()] 
	 labels[:] = ''
	 ax_mass.set_yticklabels(labels)
	 #mass error bar (34% left and 34% right)
	 mass_1D_left_value,mass_1D_right_value = Error_bars(mass_centers,mass_histo,mass_1D)
	 sigma_left_mass = abs(mass_1D - mass_1D_left_value)
	 sigma_right_mass = abs(mass_1D - mass_1D_right_value)
	 l_mass_left = ax_mass.axvline(x=mass_1D_left_value,linewidth=3, ls='--', dashes=(10,10), color='r')
	 l_mass = ax_mass.axvline(x=mass_1D,linewidth=3, color='r')
	 l_mass_right = ax_mass.axvline(x=mass_1D_right_value,linewidth=3, ls='--', dashes=(10,10), color='r') 
	 #xlabel(r'log($M$/${\rm M}_{\odot}$)')
	 #MASS-------------------------------------------------------------------------------------------------




	 #E(B-V)-----------------------------------------------------------------------------------------------
	 ax_Ebv = fig.add_subplot(143) #(143, sharey=ax_age)
	 #Ebv_histo, Ebv_edges = np.histogram(models_selected[:,2], bins=401, range=[-0.01,2.01], normed=True, weights=models_selected[:,4+number_filters], density=None)	
	 #width_Ebv = (Ebv_edges[1]-Ebv_edges[0])
	 ax_Ebv.bar(Ebv_centers, Ebv_histo, align = 'center', width = 0.02, color=(0./256.,126./256.,253./256.))
	 ax_Ebv.set_xlim(-0.01,1.01)
	 ax_Ebv.set_xticks([0.2, 0.4, 0.6, 0.8])
	 ax_Ebv.set_xlabel(r'$E(B-V)$', labelpad=0,fontsize=24)
	 ax_Ebv.tick_params(axis='both', which='major', labelsize=20)
	 labels = [item.get_text() for item in ax_Ebv.get_yticklabels()] 
	 labels[:] = ''
	 ax_Ebv.set_yticklabels(labels)
	 #Ebv error bar (34% left and 34% right)
	 Ebv_1D_left_value,Ebv_1D_right_value = Error_bars(Ebv_centers,Ebv_histo,Ebv_1D)
	 sigma_left_Ebv = abs(Ebv_1D - Ebv_1D_left_value)
	 sigma_right_Ebv = abs(Ebv_1D - Ebv_1D_right_value)
	 l_Ebv_left = ax_Ebv.axvline(x=Ebv_1D_left_value,linewidth=3, ls='--', dashes=(10,10), color='r')
	 l_Ebv = ax_Ebv.axvline(x=Ebv_1D,linewidth=3, color='r')
	 l_Ebv_right = ax_Ebv.axvline(x=Ebv_1D_right_value,linewidth=3, ls='--', dashes=(10,10), color='r')
	 #xlabel(r'$E(B-V)$')
	 #E(B-V)-----------------------------------------------------------------------------------------------


	 #Z----------------------------------------------------------------------------------------------------
	 ax_Z = fig.add_subplot(144) #(144, sharey=ax_age)
	 #Z_histo, Z_edges = np.histogram(models_selected[:,3], bins=13, range=[-0.5,12.5], normed=True, weights=models_selected[:,4+number_filters], density=None) 	
	 #width_Z = (Z_edges[1]-Z_edges[0])
	 ax_Z.bar(Z_centers, Z_histo, align = 'center', width = 1, color=(0./256.,126./256.,253./256.))
	 ax_Z.set_xlim(-0.5,12.5)
	 labels = [item.get_text() for item in ax_Z.get_xticklabels()]
	 labels[1] = '0.03'
	 labels[3] = '0.005'
	 labels[5] = '0.0008'
	 ax_Z.set_xticklabels(labels)
	 ax_Z.set_xlabel(r'$Z$', labelpad=2,fontsize=24)
	 ax_Z.tick_params(axis='both', which='major', labelsize=20)
	 #ax_Z.set_ylabel(r'N')
	 labels = [item.get_text() for item in ax_Z.get_yticklabels()] 
	 labels[:] = ''
	 ax_Z.set_yticklabels(labels)
	 #Z error bar (34% left and 34% right)
	 Z_1D_left_value,Z_1D_right_value = Error_bars(Z_centers,Z_histo,Z_1D)
	 sigma_left_Z = abs(Z_1D - Z_1D_left_value)
	 sigma_right_Z = abs(Z_1D - Z_1D_right_value)
	 l_Z_left = ax_Z.axvline(x=Z_1D_left_value,linewidth=3, ls='--', dashes=(10,10), color='r')
	 l_Z = ax_Z.axvline(x=Z_1D,linewidth=3, color='r')
	 l_Z_right = ax_Z.axvline(x=Z_1D_right_value,linewidth=3, ls='--', dashes=(10,10), color='r')
	 #Z----------------------------------------------------------------------------------------------------


	 plt.show()
	 fig.savefig(path_file_out_cluster+'histo_png/Clusters_1D_{0}_fast_{3}.png'.format(ID_clusters[ii-1],number_begin,number_end,Z_indice))
	 plt.close(fig)

 solution[ii-1,0:4] = age_1D, mass_1D, Ebv_1D, Z_1D
 print 'Solution 1D: ', solution[ii-1,0:4] #, sigma_left_age, sigma_right_age
 print 

print solution
np.savetxt(path_file_out_cluster+'Clusters_Solutions_1D_{0}_to_{1}_fast_{2}.txt'.format(number_begin,number_end,Z_indice),solution,'%.3f')

