 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !											    !
 !											    !
 !		FameClust 9.0 and Chi Square methods 		 			    !	
 !		(Finding of Age Mass and Extinction of star Clusters)			    !
 !		Philippe de Meulenaer, PhD Student in Astrophysics (year three)		    !
 !		Astronomical Observatory, Vilnius University				    !
 !											    !
 !											    !
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !
 ! Marie je te confie cela...
 !
 ! This is the version 9.0 of the program of cluster parameters. In this new version, the user can choose
 ! the different filters among the 46 filters available: 
 !
 ! - GALEX (FUV,NUV)
 ! - UBVRIJHK (traditional Johnson-Cousin-Bessel)
 ! - CFHT (u*g'r'i'z', not SDSS system)
 ! - SDSS (ugriz)
 ! - 2MASS (JHKs)
 ! - BATC (abcdefghijkmnopt)
 ! - SPITZER (IRAC+MIPS) 
 !
 ! Date of conception: 17 September 2012
 ! Last update : 17 September 2012
 ! Compilation : gfortran -O2 -march=native -mcmodel=medium ran1.f gasdev.f Module_lecture.f90 FameClust_V90_CHI2.f90 -o FameClust_V90_CHI2.exe
 !OR ifort -O2 -march=native -mcmodel=medium -o FameClust_V90_CHI2.exe ran1.f gasdev.f Module_lecture.f90 FameClust_V90_CHI2.f90 
 ! Execution : time ./FameClust_V90_CHI2.exe < /home/philippe/Desktop/Discrete_models_comparaison_jtao/SC_Parameters_20/inputfile
 ! 
 !	   (No pain, no gain!)
 !         (Let's DO it!)
 !        O 
 !    ___o
 !   (*,*)
 !   (   )
 !---"--"----
 !
 !
 !!!!!!!!!!!!!!!!!!!!!!!!!!
 !IMPORTATIONS
 !!!!!!!!!!!!!!!!!!!!!!!!!!

 Program main
 use Lecture_module_fortran
 !use gnufor2
 use omp_lib
 implicit none

 !!!!!!!!!!!!!!!!
 !INITIALISATIONS
 !!!!!!!!!!!!!!!!
 integer, parameter :: N_bin_all_nodes = 5751000 ! 107000000 !26000000 !5751000 !5534963 !4809943 !5534963 !100618943 !5534963 !4809943 !3989016 !4257723 !3989016
 real(4), allocatable :: magnitude_GRID(:,:)
 real(4), allocatable :: magnitude_GRID_SAMPLE(:,:)
 real(4), allocatable :: magnitude_GRID_SAMPLE_extinct(:,:)
 real(4), allocatable :: age_grid(:), log10_mass(:), log10_Z(:), Ebv_grid(:)
 real(4), allocatable :: magnitude_dextincted(:,:)
 real(4), allocatable :: RA(:), DEC(:), xxx(:), zzz(:)
 real(4), allocatable :: age_list(:), mass_list(:), Ebv_list(:), sigma_obs_vector(:)
 real(4), allocatable :: dist(:),dist_individual(:,:)
 real(4), allocatable :: Most_probable_node_age(:), Most_probable_node_mass(:), Most_probable_node_Ebv(:)
 real(4), allocatable :: Probability_node_max(:),age_max(:),mass_max(:),Ebv_max(:)
 real(4), allocatable :: Probability_node_max_2(:),age_max_2(:),mass_max_2(:),Ebv_max_2(:)
 real(4), allocatable :: Probability_node_max_3(:),age_max_3(:),mass_max_3(:),Ebv_max_3(:)
 real(4), allocatable :: Probability_node_max_4(:),age_max_4(:),mass_max_4(:),Ebv_max_4(:)
 real(4), allocatable :: age_max_chi2(:),mass_max_chi2(:),Ebv_max_chi2(:), chi2(:)
 real(4), allocatable :: lambda_extinction(:),magnitude_obs(:,:)
 real(4), allocatable :: wi(:)
 real(4), allocatable :: age_guess(:),mass_guess(:),Ebv_guess(:),Z_guess(:)
 real(4) :: wtot
 real(4) :: chi2_min, chi2_min_old
 real(4) :: age, mass, Z, Ebv, age_maximal, mass_maximal, Z_maximal
 real(4) :: sigma_obs,sigma_obs_JHK, bb, Proba, Rv 
 real(4) :: Mv_real,U_B_real,B_V_real, aaa
 real(4) :: BinSize,one_on_BinSize,minimum,distance,Ebv_dereddening
 real(4) :: ran1,gasdev, distance_modulus
 real(4) :: node_solution(650:1200,200:500,1:101,1:9)
 real(4) :: brakets, Distance_model, X2_X1_square, distance_X12_3sigma_sq
 real(4) :: X1_X0_square(N_bin_all_nodes) 
 real(4) :: age_mass_Z_GRID(1:3,N_bin_all_nodes),age_mass_Z_GRID_SAMPLE(1:3,N_bin_all_nodes)
 real(4) :: X2_minus_X1(1:10),d_limit
 real(4) :: lambda, lambda_f_MW, lambda_f_LMC
 real(4) :: Probability_node,Probability_node_2,Probability_node_3,Probability_node_4
 real(4) :: GRID_read(1:52,1:1000),magnitude_obs_read(1:52),xx
 real(4) :: compactness_AMZ(1:71,1:61,1:26,1:52),compactness_AMZ_all(1:71,1:61,1:26)
 real(4), dimension(1:N_bin_all_nodes) :: logage, logmass
 integer, allocatable :: sigma1_total(:), sigma2_total(:), sigma3_total(:)
 integer, allocatable ::  filters_selected(:)
 integer, allocatable :: Cluster_ID(:), Class(:)
 integer, allocatable :: number_cluster_in_box(:)
 integer, dimension(1:N_bin_all_nodes) :: height_bin, index_SAMPLE
 integer(8), allocatable :: limit1_JC(:), limit2_JC(:), limit1_SDSS(:), limit2_SDSS(:)
 integer(8) :: compteur
 integer :: sigma1_number, sigma2_number, sigma3_number
 integer :: Number_models_Mass_function(1:1000)
 integer :: counter_SAMPLE, Ext_limit1,Ext_limit2
 integer :: ff,hh,ii,jj,kk,ll,a,m,zz,Ext, number_cluster,n_lines,node
 integer :: compteur_in_box, list, number_cluster_observed
 integer :: multi_1,multi_2, method, choice, choice_extinction, weight
 integer :: number_filters, choice_filters, filters(1:52), choice_extinction_law
 integer :: idum, choice_noise, app_or_abs, switch, age_int, mass_int, aa,mm
 integer :: node_number, Most_probable_node_number
 character(len=50) :: file_name
 character(len=50) :: age_indice,mass_indice,Z_indice,Ebv_indice,noise_flag,extinction_flag
 character(len=50) :: extinction_file_name
 character(len=50) :: multi_char,jj_char, file_out_cluster2
 character(len=300) :: file_out_cluster, file_out_cluster_f90, file_name_grid,file_Test_1000_random_clusters
 character(len=300) :: file_observed_clusters,file_name_nodes_bin,forma

 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !INPUT FILE MODE
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 READ(*,*)
 READ(*,*)
 READ(*,*)number_filters
 READ(*,*)
 allocate(filters_selected(1:number_filters),lambda_extinction(1:number_filters))
 DO ii = 1,number_filters
  READ(*,*) choice_filters
  filters_selected(ii)=choice_filters
  filters(choice_filters) = 1
 ENDDO
 READ(*,*)
 READ(*,*) distance_modulus  		!M33: 24.54 (McConnachie2004;2005) !M31: 24.47 (Narbutis2008)
 READ(*,*)
 READ(*,*) app_or_abs			!apparent or absolute magnitude? (1/2)
 READ(*,*)
 READ(*,*) file_observed_clusters	!name of the file containing the observed clusters
 READ(*,*)
 READ(*,*) number_cluster_observed	!How many clusters are there in your file
 READ(*,*)
 READ(*,*) choice_extinction		!cluster(s) studied extincted or not ? (1/2)
 READ(*,*)
 READ(*,*) choice_extinction_law
 READ(*,*)
 READ(*,'(a)') file_out_cluster  	!This format '(a)' because of the slashes in the name of directories
 write(*,*) file_out_cluster		!Path where to store the output files
 !read(*,*)


 !SELECTION OF THE EXTINCTION LAW (and lambda_filter parameters) : CCM (1989)
 open(unit=18, file = 'Filters_information.dat')
 read(18,*)
 jj=0
 do ii = 1,52 !46
  read(18,*)lambda, lambda_f_MW, lambda_f_LMC
  if (filters(ii) == 1) then
   jj=jj+1
   if (choice_extinction_law == 1) then	!Case MW
    Rv = 3.1
    lambda_extinction(jj)=lambda_f_MW
   elseif (choice_extinction_law == 2) then	!Case LMC average (Gordon 2003)
    Rv = 3.4
    lambda_extinction(jj)=lambda_f_LMC
   endif
   write(*,*)ii,filters(ii),filters_selected(jj),lambda_extinction(jj)
  endif
 enddo
 close(18)
 write(*,*)' Number of filters selected:', jj
 !read(*,*)

 do ff=1,number_filters
  write(*,*)ff,filters_selected(ff),lambda_extinction(ff)
 enddo
 !stop

 !Allocation of the vectors
 ALLOCATE(number_cluster_in_box(1:number_cluster_observed))
 ALLOCATE(magnitude_dextincted(1:number_filters,1:number_cluster_observed))
 ALLOCATE(limit1_JC(1:number_cluster_observed), limit2_JC(1:number_cluster_observed))
 ALLOCATE(Cluster_ID(1:number_cluster_observed))
 ALLOCATE(RA(1:number_cluster_observed),DEC(1:number_cluster_observed),Class(1:number_cluster_observed))
 ALLOCATE(age_list(1:number_cluster_observed), mass_list(1:number_cluster_observed), Ebv_list(1:number_cluster_observed))
 ALLOCATE(xxx(1:number_cluster_observed),zzz(1:number_cluster_observed))
 ALLOCATE(sigma_obs_vector(1:number_cluster_observed))
 ALLOCATE(Most_probable_node_age(1:number_cluster_observed), Most_probable_node_mass(1:number_cluster_observed))
 ALLOCATE(Most_probable_node_Ebv(1:number_cluster_observed))
 ALLOCATE(magnitude_GRID(1:number_filters,1:N_bin_all_nodes))
 ALLOCATE(magnitude_GRID_SAMPLE(1:number_filters,1:N_bin_all_nodes))
 ALLOCATE(magnitude_GRID_SAMPLE_extinct(1:number_filters,1:N_bin_all_nodes))
 ALLOCATE(dist(1:N_bin_all_nodes),dist_individual(1:N_bin_all_nodes,1:number_filters))
 ALLOCATE(sigma1_total(1:number_cluster_observed), sigma2_total(1:number_cluster_observed),&
	& sigma3_total(1:number_cluster_observed))
 ALLOCATE(age_max(1:number_cluster_observed),mass_max(1:number_cluster_observed),Ebv_max(1:number_cluster_observed))
 ALLOCATE(age_max_2(1:number_cluster_observed),mass_max_2(1:number_cluster_observed),Ebv_max_2(1:number_cluster_observed))
 ALLOCATE(age_max_3(1:number_cluster_observed),mass_max_3(1:number_cluster_observed),Ebv_max_3(1:number_cluster_observed))
 ALLOCATE(age_max_4(1:number_cluster_observed),mass_max_4(1:number_cluster_observed),Ebv_max_4(1:number_cluster_observed))
 ALLOCATE(age_max_chi2(1:number_cluster_observed),mass_max_chi2(1:number_cluster_observed))
 ALLOCATE(Ebv_max_chi2(1:number_cluster_observed), chi2(1:number_cluster_observed))
 ALLOCATE(Probability_node_max(1:number_cluster_observed),Probability_node_max_2(1:number_cluster_observed))
 ALLOCATE(Probability_node_max_3(1:number_cluster_observed),Probability_node_max_4(1:number_cluster_observed))
 ALLOCATE(magnitude_obs(1:number_filters,1:number_cluster_observed))
 ALLOCATE(wi(1:number_filters))
 ALLOCATE(age_guess(1:number_cluster_observed),mass_guess(1:number_cluster_observed))
 ALLOCATE(Ebv_guess(1:number_cluster_observed),Z_guess(1:number_cluster_observed))


 !CALL chdir('/home/philippe/Desktop/') !if the file of clusters to analyze is on the desktop
 CALL chdir(file_out_cluster)	       !if the file of clusters to analyze is in the same dir that the one where results will be
 CALL system('date')
 
 !READING OF THE OBSERVATIONS
 OPEN(unit=10,file=file_observed_clusters)
 READ(10,*)
 magnitude_obs(:,:)=0.
 DO list = 1, number_cluster_observed
  !READ(10,*) Cluster_ID(list), xx,xx,xx,xx, magnitude_obs_read(1:52)
  READ(10,*) Cluster_ID(list), xx,xx,xx,xx, magnitude_obs_read(1:18)
  !READ(10,*)  Cluster_ID(list), magnitude_obs_read(1:number_filters)
  !write(*,*)  Cluster_ID(list), magnitude_obs_read(1:number_filters)
  do ff = 1,number_filters   
   magnitude_obs(ff,list) = &
	& magnitude_obs_read(filters_selected(ff))
  enddo
  write(*,*) Cluster_ID(list), magnitude_obs(1:number_filters,list)
  IF (app_or_abs == 1) then
   do ii = 1, number_filters
    magnitude_obs(ii,list) = magnitude_obs(ii,list) - distance_modulus
   enddo
  ENDIF
 ENDDO
 CLOSE(10)

 DO list = 1, number_cluster_observed			!M33 Clusters of Ma (2012)
  magnitude_obs(2,list) = magnitude_obs(2,list) - 0.1   !M33 Clusters of Ma (2012)
 ENDDO							!M33 Clusters of Ma (2012)

!stop

 idum=-1
 DO list = 1, number_cluster_observed  !Selection of the cluster in the list of clusters in the node
  sigma_obs_vector(list) = 0.05 !0.2 !0.05    !In normal case *********************************************************************
   !IF (magnitude_obs(3,list) > -6.69) then
   ! sigma_obs_vector(list) = 0.01 * exp (0.3665 * (magnitude_obs(3,list)+6.69))
   !ELSEIF (magnitude_obs(3,list) <= -6.69) then
   ! sigma_obs_vector(list) = 0.01 
   !ENDIF
   !IF (g_SDSS_obs(list) > -6.69) then
   ! sigma_obs_vector(list) = 0.01 * exp (0.3665 * (g_SDSS_obs(list)+6.69))
   !ELSEIF (g_SDSS_obs(list) <= -6.69) then
   ! sigma_obs_vector(list) = 0.01 
   !ENDIF
 ENDDO


 CALL chdir('/home/philippe/Desktop/Discrete_models_comparaison_jtao/SC_Parameters_20/Source/')


 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !READING ON THE GRID OF NODES
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !Loading first the compactness of the grid in the program
 !compactness_AMZ(:,:,:,:) = 0.
 !open(unit=20,file='/home/philippe/Desktop/Grid_compactness_nodes.dat')
 !read(20,*)
 !Do aa = 1,71  		!Loop on the age. 
 ! Do mm = 1,61 ![2.7-5.0] !Loop on the mass. 
 !  Do zz = 2,26,2 !20,20 !1,26 !,2 !4,24,4   ! 20,20	!Loop on the metallicity
 !    read(20,'(F10.3,F10.3,F10.5,46F10.5)')age,mass,Z,compactness_AMZ(aa,mm,zz,1:46)
 !    age=0.
 !    mass=0.
 !    Z=0.
 !    Ext = 1
 !   call age_mass_Z_December(aa,mm,zz,Ext,age,mass,Z,Ebv,age_indice,mass_indice,Z_indice,Ebv_indice)
 !    !write(*,'(F10.3,F10.3,F10.5,46F10.5)')age,log10(mass),Z,compactness_AMZ(aa,mm,zz,1:46)
 !
 !    compactness_AMZ_all(aa,mm,zz) = 0.
 !    do ff=1,number_filters 
 !     compactness_AMZ_all(aa,mm,zz) = compactness_AMZ_all(aa,mm,zz) + compactness_AMZ(aa,mm,zz,filters_selected(ff))**2
 !    enddo
 !    compactness_AMZ_all(aa,mm,zz) = sqrt(compactness_AMZ_all(aa,mm,zz)) !computation of the sigma for UBVRI (or others)
 !
 !  Enddo
 ! Enddo
 !Enddo
 !WRITE(*,*) ' Compactness of the grid has been loaded correctly' 
 !WRITE(*,*) '' 
 !CALL system('date')


 compteur = 0
 compteur_in_box = 0
 CALL system('date')
 WRITE(*,*) '' 
 WRITE(*,*) ' Loading of the grid in the program'
 ii=1
 Do aa = 1,71  		!Loop on the age. 
  Do mm = 1,61 ![2.7-5.0] !81   		!Loop on the mass. 
 !Do aa = 1,353  		!Loop on the age. 
 ! Do mm = 71,301 ![2.7-5.0] !81   		!Loop on the mass. 
   Do zz = 20,20 !20,20 !4,24,4   !20,20
    Ext = 1
    !Girardi et al. (2010) isochrones, NOT TRUNCATED!! CHECK!!!  CORRECTED FOR MOST MASSIVE STAR!!!!!!!!!!!
    call age_mass_Z_December(aa,mm,zz,Ext,age,mass,Z,Ebv,age_indice,mass_indice,Z_indice,Ebv_indice)
    !call age_mass_Z_March2012(aa,mm,zz,Ext,age,mass,Z,Ebv,age_indice,mass_indice,Z_indice,Ebv_indice)
    file_name_nodes_bin = '/home/philippe/Desktop/Discrete_models_comparaison_jtao/Grid_gCMD014_71_81_Z'
    !file_name_nodes_bin = '/home/philippe/Desktop/Discrete_models_comparaison_jtao/Grid_gCMD014_353_301_Z'
    file_name_nodes_bin = trim(file_name_nodes_bin) // trim(Z_indice) // '_AllB_HST_20pc_untruncated_iso_binary/'
    file_name_nodes_bin = trim(file_name_nodes_bin) // 't' // trim(age_indice) // '_M' //&
	& trim(mass_indice) // '_Z' // trim(Z_indice)
    call Lecture_UBVRI_ugriz_GRID(file_name_nodes_bin,GRID_READ) 
    do ff=1,number_filters 
     magnitude_GRID(ff,ii:ii+999) = GRID_READ(filters_selected(ff),:)
    enddo
    age_mass_Z_GRID(1,ii:ii+999) = age
    age_mass_Z_GRID(2,ii:ii+999) = log10(mass)
    age_mass_Z_GRID(3,ii:ii+999) = Z
    ii=ii+1000
   Enddo
  Enddo
    write(*,*)age
 Enddo
 WRITE(*,*) ' The grid has been loaded correctly' 
 WRITE(*,*) '' 
 CALL system('date')






!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! LOOP OF RESEARCH IN THE GRID
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 CALL system('date')
 !IF (switch == 1) then
 ! file_out_cluster = '/home/philippe/Desktop/Discrete_models_comparaison_jtao/SC_Parameters_20/results_artificial_clusters/'
 !ENDIF
 file_out_cluster_f90 = trim(file_out_cluster)
 file_out_cluster = trim(file_out_cluster)//'file_out_cluster'
 file_out_cluster_f90 = trim(file_out_cluster_f90)//'All_clusters_parameters_results_f90_CHI2_bis'
 open(unit=41,file=file_out_cluster_f90)
 write(41,*)'   #ID  age1 mas1 Ebv1    sigma1    sigma2    sigma3  Proba1          ageC masC EbvC     Chi2&
	&      age2 mas2 Ebv2  Proba2          age3 mas3 Ebv3  Proba3          age4 mas4 Ebv4  Proba4'
 Ebv_dereddening = 2.
 WRITE(*,*)
 WRITE(*,*) ' Beginning of the determination of parameters'
 number_cluster_in_box(:) = 0
 sigma1_total(:) = 0 
 sigma2_total(:) = 0 
 sigma3_total(:) = 0 
 age_max(:) = 0.
 mass_max(:) = 0.
 Ebv_max(:) = 0.
 Probability_node_max(:) = 0.
 age_max_chi2(:) = 0.
 mass_max_chi2(:) = 0.
 Ebv_max_chi2(:) = 0.
 chi2(:)=999999999.
 age_max_2(:) = 0.
 mass_max_2(:) = 0.
 Ebv_max_2(:) = 0.
 Probability_node_max_2(:) = 0.
 age_max_3(:) = 0.
 mass_max_3(:) = 0.
 Ebv_max_3(:) = 0.
 Probability_node_max_3(:) = 0.
 age_max_4(:) = 0.
 mass_max_4(:) = 0.
 Ebv_max_4(:) = 0.
 Probability_node_max_4(:) = 0.


 DO list = 1, number_cluster_observed  !Loop for the 10 observed clusters

  node_solution(:,:,:,:) = 0. !Preparation of the node solution matrix
  WRITE(*,*) ' Analyze of cluster number ', list
  WRITE(*,*)
  WRITE(jj_char, '(i10)' ) Cluster_ID(list) !Now the name of the output will have ID of clusters !list
  WRITE(*,*) '# ',Cluster_ID(list),magnitude_obs(1:number_filters,list),RA(list),DEC(list) !,Class(list)
  counter_SAMPLE=0
  ! 1) for each model, compute the distance between the model point X0 and the line X1-X2 
  !(X1 = the observed cluster, X2 = the observed cluster dereddened from quantity Ebv=2)
     !1.1) Calculate the point X2:
     magnitude_dextincted(1:number_filters,list) = magnitude_obs(1:number_filters,list) - lambda_extinction(1:number_filters) *Rv*2. !Ebv_dereddening
     !1.2) Calculate the distance |X2-X1|**2:
     X2_X1_square = 0.
     do ff=1,number_filters
       X2_X1_square = X2_X1_square + (magnitude_dextincted(ff,list) - magnitude_obs(ff,list))**2 
     enddo
     distance_X12_3sigma_sq = X2_X1_square * 9 * sigma_obs_vector(list) * sigma_obs_vector(list)
     !1.3) Generate the point X2-X1, X2_minus_X1:
     !(x2-x1,y2-y1,z2-z1)
     X2_minus_X1(:) = magnitude_dextincted(:,list) - magnitude_obs(:,list)
     !1.4) Calculate the distance |X1-X0|**2: (for all the models immediately, in one time)
     X1_X0_square(:) = 0.
     do ff=1,number_filters    
     X1_X0_square(:) = X1_X0_square(:) + ( magnitude_GRID(ff,:)-magnitude_obs(ff,list) )**2
     enddo
  DO ii = 1,N_bin_all_nodes	!For each model of the grid:
     Distance_model = 10000.
     brakets = 0.
     do ff=1,number_filters  	!Could be done before loop???
      brakets = brakets + X2_minus_X1(ff) * (magnitude_obs(ff,list) - magnitude_GRID(ff,ii))
     enddo
     Distance_model = X1_X0_square(ii)*X2_X1_square - brakets*brakets

     !2) Compare the distance to 3*sigma, accept if smaller or equal. 
     IF (Distance_model <= distance_X12_3sigma_sq) then
      counter_SAMPLE = counter_SAMPLE + 1
      index_SAMPLE(counter_SAMPLE)=ii
      magnitude_GRID_SAMPLE(:,counter_SAMPLE) = magnitude_GRID(:,ii)		!!!DEFINE THIS AND OTHER QUANTITIES!!!
      age_mass_Z_GRID_SAMPLE(:,counter_SAMPLE) = age_mass_Z_GRID(:,ii)
     ENDIF
  ENDDO
  write(*,*)'counter_SAMPLE =',counter_SAMPLE
  
  !d_limit = 0.04  !Large noise of sigma=0.1 mag for BATC test
  d_limit = 0.0025 !sigma_obs_vector(list)*sigma_obs_vector(list)
  chi2_min_old=999999999. !For each of the list clusters
  !Ext_limit1=1
  !Ext_limit2=51 !101
  Ext_limit1=3
  Ext_limit2=51 !101
  DO Ext = Ext_limit1,Ext_limit2 !1,101 !16,26 !1,51 !16,26 !51 !101 !1,26	!Loop on the extinction
     !Reddening the components of the grid
     Ebv = (Ext-1)*0.02

     do ff = 1, number_filters
      magnitude_GRID_SAMPLE_extinct(ff,1:counter_SAMPLE) = magnitude_GRID_SAMPLE(ff,1:counter_SAMPLE) + lambda_extinction(ff)*Rv*Ebv
     enddo

     dist(1:counter_SAMPLE) = 0.
     dist_individual(1:counter_SAMPLE,1:number_filters) = 0.
     do ff = 1, number_filters
      dist(1:counter_SAMPLE) = dist(1:counter_SAMPLE) + &
	& (magnitude_GRID_SAMPLE_extinct(ff,1:counter_SAMPLE)-magnitude_obs(ff,list))**2
      dist_individual(1:counter_SAMPLE,ff) = &
	& (magnitude_GRID_SAMPLE_extinct(ff,1:counter_SAMPLE)-magnitude_obs(ff,list))**2
     enddo
     !!dist(1:counter_SAMPLE) = dist(1:counter_SAMPLE)**0.5

       compteur_in_box = compteur_in_box+1
       DO ii = 1,counter_SAMPLE	!loop on reduced box, PLUG

	!Part Chi square------------------------------------------------------
	chi2_min = 0.
	do ff = 1, number_filters
         chi2_min = chi2_min + &
	& 400*(magnitude_GRID_SAMPLE_extinct(ff,ii)-magnitude_obs(ff,list))**2
        enddo
	if (chi2_min < chi2_min_old) then
	 chi2(list) = chi2_min
	 age_max_chi2(list) = age_mass_Z_GRID_SAMPLE(1,ii) 
	 mass_max_chi2(list) = age_mass_Z_GRID_SAMPLE(2,ii) 
	 Ebv_max_chi2(list) = Ebv
         chi2_min_old = chi2_min
	endif
	chi2_min = 0.
	!Part Chi square------------------------------------------------------

	!Part FameClust-------------------------------------------------------
	IF (dist(ii) < 9*d_limit) then
	 weight = 3 !1	!code: python program will translate that in appropriate weight
	 IF (dist(ii) < 4*d_limit) then
	  weight = 2 !1452	!code: python program will translate that in appropriate weight
	  IF (dist(ii) < d_limit) then
	   weight = 1 !53108	!code: python program will translate that in appropriate weight
	  ENDIF
	 ENDIF
	 !Writing (preparation) the solution for one node (age-mass-extinction)
         age_int = nint(age_mass_Z_GRID_SAMPLE(1,ii)*100)
         mass_int = nint(age_mass_Z_GRID_SAMPLE(2,ii)*100)
	 node_solution(age_int,mass_int,Ext,1) = age_mass_Z_GRID_SAMPLE(1,ii) 
	 node_solution(age_int,mass_int,Ext,2) = age_mass_Z_GRID_SAMPLE(2,ii) 
	 node_solution(age_int,mass_int,Ext,3) = Ebv
	 !convert metallicity into zz and input Z in node_solution(age_int,mass_int,Ext,zz,4) = Z
 	 if (weight == 1) node_solution(age_int,mass_int,Ext,4)=node_solution(age_int,mass_int,Ext,4)+1
 	 if (weight == 2) node_solution(age_int,mass_int,Ext,5)=node_solution(age_int,mass_int,Ext,5)+1
 	 if (weight == 3) node_solution(age_int,mass_int,Ext,6)=node_solution(age_int,mass_int,Ext,6)+1

	 !For step gaussian solution
 	 if (weight == 1) node_solution(age_int,mass_int,Ext,7)=node_solution(age_int,mass_int,Ext,7)+0.68
 	 if (weight == 2) node_solution(age_int,mass_int,Ext,7)=node_solution(age_int,mass_int,Ext,7)+0.28
 	 if (weight == 3) node_solution(age_int,mass_int,Ext,7)=node_solution(age_int,mass_int,Ext,7)+0.04
	 !For continuous gaussian solution
	 node_solution(age_int,mass_int,Ext,8) = node_solution(age_int,mass_int,Ext,8) &
	& + exp(-200.*dist(ii))  
 
	 !For continuous gaussian solution with weights individual for each band!
	 !wi(1:number_filters) = exp(-200.*dist_individual(ii,1:number_filters))
	 !wtot = 1.
	 !do ff=1,number_filters
	 !wtot = wtot * wi(ff)
	 !enddo
	 !node_solution(age_int,mass_int,Ext,9) = node_solution(age_int,mass_int,Ext,9) &
	!& + wtot 
	 !For INVERSE SQUARE WEIGHTING
	 node_solution(age_int,mass_int,Ext,9) = node_solution(age_int,mass_int,Ext,9) &
	& + 1./(dist(ii)*dist(ii)) !*dist(ii)*dist(ii)) 

	 !write(*,*)dist_individual(ii,1:number_filters),dist(ii)
	 !write(*,*)exp(-200.*dist(ii))
	 !write(*,'(E12.4,E12.4,E12.4,E12.4,E12.4,E12.4)')wi(1:number_filters),wtot
 
	 number_cluster_in_box(list) = number_cluster_in_box(list) + 1


        ENDIF
	!Part FameClust-------------------------------------------------------

       ENDDO	
     compteur = compteur + N_bin_all_nodes
     IF (choice_extinction == 2) exit
  ENDDO    	!End of loop on the extinction

  !Writing the solution for one node (age-mass-extinction), which is a smaller file
  OPEN(unit = 40,file=trim(file_out_cluster)//'_'//trim(adjustl(jj_char))//'_node.dat')
  do age_int = 650, 1200
   do mass_int = 200, 500
    do Ext = Ext_limit1,Ext_limit2
     node_number = 0

     !In case of Compacity
     !age = real(age_int)/100.
     !mass = real(mass_int)/100.
     !Ebv = (Ext-1)*0.02
     !Z=0.008
     !aa = 20*(age-6.60)+1
     !mm = 20*(mass-2.00)+1

     !write(*,*)age,mass,Z,Ebv
     !call age_mass_Z_December_Inverse(aa,mm,zz,Ext,age,mass,Z,Ebv)
     !write(*,*)age,mass,Z,Ebv

     if (node_solution(age_int,mass_int,Ext,1) > 0.) then
     !if (int(node_solution(age_int,mass_int,Ext,6) > 0) then      !Should be tested!!!!
        sigma1_number = int(node_solution(age_int,mass_int,Ext,4))
        sigma2_number = int(node_solution(age_int,mass_int,Ext,5))
        sigma3_number = int(node_solution(age_int,mass_int,Ext,6))
        Probability_node = (4114.*sigma1_number + 216.*sigma2_number + 1.*sigma3_number)/(4114.*number_cluster_in_box(list))
	Probability_node_2=node_solution(age_int,mass_int,Ext,7)/(0.68*number_cluster_in_box(list))
	Probability_node_3=node_solution(age_int,mass_int,Ext,8)/number_cluster_in_box(list)
	Probability_node_4=node_solution(age_int,mass_int,Ext,9)/number_cluster_in_box(list)

        !In case of Compacity
        !Probability_node=Probability_node*compactness_AMZ_all(aa,mm,20)**2
        !Probability_node_2=Probability_node_2*compactness_AMZ_all(aa,mm,20)**2
        !Probability_node_3=Probability_node_3*compactness_AMZ_all(aa,mm,20)**2
        !Probability_node_4=Probability_node_4*compactness_AMZ_all(aa,mm,20)**2

	write(40,'(F5.2,F5.2,F5.2,i5,i5,i5,F5.2,E12.4)')node_solution(age_int,mass_int,Ext,1), node_solution(age_int,mass_int,Ext,2),&
	&node_solution(age_int,mass_int,Ext,3), int(node_solution(age_int,mass_int,Ext,4)),&
	&int(node_solution(age_int,mass_int,Ext,5)), int(node_solution(age_int,mass_int,Ext,6)),&
	&0.,Probability_node
	sigma1_total(list) = sigma1_total(list) + sigma1_number
	sigma2_total(list) = sigma2_total(list) + sigma2_number
	sigma3_total(list) = sigma3_total(list) + sigma3_number
	if (Probability_node > Probability_node_max(list)) then 	!Solution now
         age_max(list) = node_solution(age_int,mass_int,Ext,1)
         mass_max(list) = node_solution(age_int,mass_int,Ext,2)
         Ebv_max(list) = node_solution(age_int,mass_int,Ext,3)
	 Probability_node_max(list) = Probability_node
	endif
	if (Probability_node_2 > Probability_node_max_2(list)) then 	!Solution step gaussian
         age_max_2(list) = node_solution(age_int,mass_int,Ext,1)
         mass_max_2(list) = node_solution(age_int,mass_int,Ext,2)
         Ebv_max_2(list) = node_solution(age_int,mass_int,Ext,3)
	 Probability_node_max_2(list) = Probability_node_2
	endif
	if (Probability_node_3 > Probability_node_max_3(list)) then 	!Solution continuous gaussian
         age_max_3(list) = node_solution(age_int,mass_int,Ext,1)
         mass_max_3(list) = node_solution(age_int,mass_int,Ext,2)
         Ebv_max_3(list) = node_solution(age_int,mass_int,Ext,3)
	 Probability_node_max_3(list) = Probability_node_3
	endif
	if (Probability_node_4 > Probability_node_max_4(list)) then 	!Solution continuous gaussian
         age_max_4(list) = node_solution(age_int,mass_int,Ext,1)
         mass_max_4(list) = node_solution(age_int,mass_int,Ext,2)
         Ebv_max_4(list) = node_solution(age_int,mass_int,Ext,3)
	 Probability_node_max_4(list) = Probability_node_4
	endif
     endif
    enddo
   enddo
  enddo
  close(40)
  forma='(i5,F7.2,F5.2,F5.2,i10,i10,i10,E12.4,F10.2,F5.2,F5.2,F9.2'
  forma=trim(forma)//',F10.2,F5.2,F5.2,E12.4,F10.2,F5.2,F5.2,E12.4,F10.2,F5.2,F5.2,E12.4)'
  write(41,forma) & 
	&list,&
	&age_max(list),mass_max(list),Ebv_max(list),&
	&sigma1_total(list),sigma2_total(list),sigma3_total(list),Probability_node_max(list),&
	&age_max_chi2(list),mass_max_chi2(list),Ebv_max_chi2(list),chi2(list),&
	&age_max_2(list),mass_max_2(list),Ebv_max_2(list),Probability_node_max_2(list),&
	&age_max_3(list),mass_max_3(list),Ebv_max_3(list),Probability_node_max_3(list),&
	&age_max_4(list),mass_max_4(list),Ebv_max_4(list),Probability_node_max_4(list)
 ENDDO		!End of loop for the observed clusters
 close(41)

 deALLOCATE(number_cluster_in_box)
 deALLOCATE(magnitude_dextincted)
 deALLOCATE(limit1_JC, limit2_JC)
 deALLOCATE(Cluster_ID)
 deALLOCATE(RA,DEC,Class)
 deALLOCATE(age_list, mass_list, Ebv_list)
 deALLOCATE(xxx,zzz)
 deALLOCATE(sigma_obs_vector)
 deALLOCATE(Most_probable_node_age, Most_probable_node_mass)
 deALLOCATE(Most_probable_node_Ebv)
 deALLOCATE(magnitude_GRID)
 deALLOCATE(magnitude_GRID_SAMPLE)
 deALLOCATE(magnitude_GRID_SAMPLE_extinct)
 deALLOCATE(dist,dist_individual)
 deALLOCATE(sigma1_total, sigma2_total, sigma3_total)
 deALLOCATE(age_max,mass_max,Ebv_max)
 deALLOCATE(age_max_2,mass_max_2,Ebv_max_2)
 deALLOCATE(age_max_3,mass_max_3,Ebv_max_3)
 deALLOCATE(age_max_4,mass_max_4,Ebv_max_4)
 deALLOCATE(age_max_chi2,mass_max_chi2)
 deALLOCATE(Ebv_max_chi2, chi2)
 deALLOCATE(Probability_node_max,Probability_node_max_2)
 deALLOCATE(Probability_node_max_3,Probability_node_max_4)
 deALLOCATE(magnitude_obs)
 deALLOCATE(wi)
 deALLOCATE(age_guess,mass_guess)
 deALLOCATE(Ebv_guess,Z_guess)

 CALL system('date')
 WRITE(*,*)'Computation completed' 
 stop
 end program
